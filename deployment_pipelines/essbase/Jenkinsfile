def pipelineLib = null
def warList = ""
def appList = "\n"

pipeline {
    agent {
        label 'Linux_Slave_3'
    }
    environment {
        BRANCH_TO_RUN           = 'master'
        PACKAGE_DIR             = "${env.WORKSPACE}/${env.BUILD_NUMBER}"
        DEPLOYMENT_LIST_FILE    = "deploymentList.yml"
        DEPLOYMENT_SERVICE_ACCT = 'juser'
        NEXUS_URL               = 'https://nexus.honda.ca:8443'
        NEXUS_REPO              = 'honda-artifacts-release'
        NEXUS_REPO_PROD         = 'honda-artifacts-production'
        NEXUS_USER              = 'mvn-deploy'
        NEXUS_KEY               = 'iMuxRFCA45LY3pT4KE7APwOehgJ4sKE-eUvnYG1zsSgW'
        NEXUS_GROUP             = 'ca/honda/apps/essbase'
        TEMP_WORK_FOLDER        = 'TEMP_WORK_FOLDER'

        QA_JOBSS_1               = '10.2.222.180'
        PROD_JOBSS_1             = '10.2.222.191'

        BUILD_NUM               = "${env.BUILD_NUMBER}"
        TARGET_ENV              = "${env.DEPLOY_ENV}"
        DRYRUN                  = "${env.DRY_RUN}"
       // DEPLOY_APPROVER_EMAIL   = 'udaykumar_vellala@ch.honda.com,kevin_lou@ch.honda.com'
        //DEPLOY_NOTIFY_EMAIL     = 'udaykumar_vellala@ch.honda.com,kevin_lou@ch.honda.com'

        DEPLOY_APPROVER_EMAIL   = 'kevin_lou@ch.honda.com'
        DEPLOY_NOTIFY_EMAIL     = 'kevin_lou@ch.honda.com'

        JENKINS_EMAIL           = 'devops@ch.honda.com'

        PACKAGE_DESTINATION     = '/apps/jboss-eap-7.0/honda/deployment/scripts/'
        //PACKAGE_DESTINATION     = '/tmp'
        DEPLOYMENT_SCRIPT_ROOT  = '/apps/jboss-eap-7.0/honda/deployment/scripts/'
        HCFI_INSTALL_SCRIPT     = '/apps/jboss-eap-7.0/honda/deployment/scripts/JBossDeploy.sh'
        JKS_MASTER_IP           = '10.10.221.33'
        HCFI_BUILD_INFO_SHEET   = '/JKS/cjtws/.ProdDeploymentHistory/hcfi_build_info_sheet'

    }
    stages {
        stage('Authenticate the deployment') {
            steps {
                script {
                    pipelineLib = load "${WORKSPACE}/vars/libs.groovy"   
                    runDeploy = true
                    jobBaseName = pipelineLib.getJobName(JOB_NAME)
                    if (runDeploy)  {
                       pipelineLib.authenticateDeployment()
                    }
                }
            }
        }

        stage('Get application list') {
            steps {
                script { 
                    dir(TEMP_WORK_FOLDER) {                        
                        deleteDir() //clean up temp folder
                        generateDeploymentFile()
                        deploymentInstructions = readYaml file: DEPLOYMENT_LIST_FILE
                        deploymentInstructions.application.each {
                            appList = appList + "  - ${it.name}   \n"
                            warList = warList + " ${it.name}.${it.fileType} "
                        }                        
                        warList = warList.replace("\n", ""); 
                        warList = HCFI_INSTALL_SCRIPT + warList; 
                    }
                }
            }
        }

        stage('Download application from Nexus ') {
           when { 
               expression { return runDeploy }   
            }
            steps {
                script { 
                    dir(TEMP_WORK_FOLDER) {
                        sh "chmod +x ${WORKSPACE}/miscellaneous/my_curl.sh" 
                        deploymentInstructions.application.each {
                            sh "${WORKSPACE}/miscellaneous/my_curl.sh download ${PACKAGE_DIR}/${it.name}.${it.fileType} ${it.artifactURL}"
                        }      
                        displayName = BUILD_NUM + '-' + deploymentInstructions.environment  
                        currentBuild.displayName = BUILD_NUM + '-' + deploymentInstructions.environment
                        currentBuild.description = "Application(s) deployed: " + appList
                    }               
                }
            }
        }

        stage('Deployment approval') {
           when { 
               expression { return runDeploy }   
            }
            steps {
                script { 
                    dir(TEMP_WORK_FOLDER) { 
                        approvalMsg = "The following application(s) will be deployed to " + TARGET_ENV +  appList                      
                        pipelineLib.sendDeploymentApprovalEmail(DEPLOY_APPROVER_EMAIL, JENKINS_EMAIL, jobBaseName, BUILD_NUM)
                        timeout(time: 60, unit: 'MINUTES') {
                            input(id: "Deploy Approval", message: approvalMsg, ok: 'Deploy')
                        }
                    }
                }
            }
        }


        stage('Prepare Deployment') {
           when { 
               expression { return true }   
            }
            steps {
                script { 
                    dir(TEMP_WORK_FOLDER) {
                        backUpDir = pipelineLib.backUpDirectoryName(jobBaseName)
                        backUpDir = "${PACKAGE_DESTINATION}/${backUpDir}"
                        sh "echo \"cd ${PACKAGE_DESTINATION}\" > backup.command.txt"
                        sh "echo \"mkdir -p ${backUpDir}\" >> backup.command.txt"
                        
                        deploymentInstructions.application.each {                    
                            sh "echo \"cp ${PACKAGE_DESTINATION}/${it.name}.${it.fileType} ${backUpDir}  \" >> backup.command.txt"      
                        }
                        sh "cp backup.command.txt ${PACKAGE_DIR}"                        
                        sh "echo \"cd ${DEPLOYMENT_SCRIPT_ROOT}\" > install.command.txt"
                        sh '''
                            echo "cd ${DEPLOYMENT_SCRIPT_ROOT}" >> install.command.txt
                            echo "'''+warList+'''" >> install.command.txt
                            '''
                        sh "cp install.command.txt ${PACKAGE_DIR}"
                    }
                }
            }
        }

        stage('Send artifacts to the QA') {
           when { 
               expression { 
                   return runDeploy &&  deploymentInstructions.environment == "qa" 
                }     
            }
            steps {
                script { 
                    dir(TEMP_WORK_FOLDER) {  
                        sh "ssh ${DEPLOYMENT_SERVICE_ACCT}@${QA_JOBSS_1} < backup.command.txt "
                        deploymentInstructions.application.each {                            
                            echo "Sending ${PACKAGE_DIR}/${it.name}.${it.fileType} to ${QA_JOBSS_1}"
                            sh "scp ${PACKAGE_DIR}/${it.name}.${it.fileType} ${DEPLOYMENT_SERVICE_ACCT}@${QA_JOBSS_1}:${PACKAGE_DESTINATION}"
                        }
                    }
                }
            }
        }


        stage('Send artifacts to the PROD') {
           when { 
               expression { return runDeploy &&  deploymentInstructions.environment == "prod"  }   
            }
            steps {
                script { 
                    dir(TEMP_WORK_FOLDER) {    
                       // sh "ssh ${DEPLOYMENT_SERVICE_ACCT}@${PROD_JOBSS_1} < backup.command.txt "
                        deploymentInstructions.application.each {                            
                            echo "Sending ${PACKAGE_DIR}/${it.name}.${it.fileType} to ${PROD_JOBSS_1}"
                            sh "scp ${PACKAGE_DIR}/${it.name}.${it.fileType} ${DEPLOYMENT_SERVICE_ACCT}@${PROD_JOBSS_1}:${PACKAGE_DESTINATION}"
                            sh "cp  ${PACKAGE_DIR}/${it.name}.${it.fileType} /JKS/prod-artifacts/"

                        }
                    }
                }
            }
        }

        stage('Install in QA') {
           when { 
               expression { return runDeploy &&  deploymentInstructions.environment == "qa" }     
            }
            steps {
                script { 
                    dir(TEMP_WORK_FOLDER) {
                        sh  "ssh ${DEPLOYMENT_SERVICE_ACCT}@${QA_JOBSS_1} < install.command.txt "
                    }
                }
            }
        }

        stage('Install in PROD') {
           when { 
               expression { return runDeploy &&  deploymentInstructions.environment == "prod" }   
            }
            steps {
                script { 
                    dir(TEMP_WORK_FOLDER) {
                        sh "ssh ${DEPLOYMENT_SERVICE_ACCT}@${PROD_JOBSS_1} < install.command.txt "
                    }
                }
            }
        }
        stage('PROD deployment SOX report') {
           when { 
               expression { return runDeploy && deploymentInstructions.environment == "prod"  }   
            }
            steps {
                script { 
                    dir(TEMP_WORK_FOLDER) {
                        sh " scp cloudbees-jenkins-distribution@${JKS_MASTER_IP}:${HCFI_BUILD_INFO_SHEET} ."
                        pipelineLib.recordProdDeployInfo(DEPLOYMENT_LIST_FILE, jobBaseName, BUILD_NUM)
                        sh "scp hcfi_build_info_sheet cloudbees-jenkins-distribution@${JKS_MASTER_IP}:${HCFI_BUILD_INFO_SHEET}"
                    }
                }
            }
        }


    }

    post {
        always {
            script {
                dir(TEMP_WORK_FOLDER) {
                    archiveArtifacts allowEmptyArchive: true, artifacts: "deploymentList.yml"
                    if (runDeploy) {
                        pipelineLib.sendBuildReportEmail(DEPLOY_NOTIFY_EMAIL,JENKINS_EMAIL)
                    }               
                    echo "Sending email"
                }
                // deleteDir()
                echo "Post deployment "
            }
        }
    }
}

def generateDeploymentFile(){
sh '''
    pwd
    
    mkdir -p ${WORKSPACE}/${BUILD_NUMBER}
    cd ${WORKSPACE}/${BUILD_NUMBER}
    echo "Generating ${DEPLOYMENT_LIST_FILE}"

    echo "# deployment list" > ${DEPLOYMENT_LIST_FILE}
    echo "environment: ${DEPLOY_ENV} " >> ${DEPLOYMENT_LIST_FILE}
    echo "deployer: ${BUILD_USER} " >> ${DEPLOYMENT_LIST_FILE}
    echo "jenkinsJobNumber: ${BUILD_NUMBER} " >> ${DEPLOYMENT_LIST_FILE}
    echo "application: " >> ${DEPLOYMENT_LIST_FILE}

	if [ ${server} = "true" ]; then
        echo "  - name: ess-server" >> ${DEPLOYMENT_LIST_FILE}        
        echo "    fileType: war" >> ${DEPLOYMENT_LIST_FILE}
        echo "    version: '${server_version}'" >> ${DEPLOYMENT_LIST_FILE}
        echo "    buildJobName: 'ess-server'" >> ${DEPLOYMENT_LIST_FILE}
        echo "    artifactURL: ${NEXUS_URL}/repository/${NEXUS_REPO}/${NEXUS_GROUP}/ess-server/${server_version}/ess-server-${server_version}.war " >> ${DEPLOYMENT_LIST_FILE}
        echo "    artifactURLPROD: ${NEXUS_URL}/repository/${NEXUS_REPO_PROD}/${NEXUS_GROUP}/ess-server/${server_version}/ess-server-${server_version}.war " >> ${DEPLOYMENT_LIST_FILE}
    fi
	if [ ${ui} = "true" ]; then
        echo "  - name: ess-base-ui-app" >> ${DEPLOYMENT_LIST_FILE}        
        echo "    fileType: war" >> ${DEPLOYMENT_LIST_FILE}
        echo "    version: '${ui_version}'" >> ${DEPLOYMENT_LIST_FILE}
        echo "    buildJobName: 'ess-ui'" >> ${DEPLOYMENT_LIST_FILE}
        echo "    artifactURL: ${NEXUS_URL}/repository/${NEXUS_REPO}/${NEXUS_GROUP}/ess-base-ui-app/${ui_version}/ess-base-ui-app-${ui_version}.war " >> ${DEPLOYMENT_LIST_FILE}
        echo "    artifactURLPROD: ${NEXUS_URL}/repository/${NEXUS_REPO_PROD}/${NEXUS_GROUP}/ess-base-ui-app/${ui_version}/ess-base-ui-app-${ui_version}.war " >> ${DEPLOYMENT_LIST_FILE}
    fi

   cp  ${DEPLOYMENT_LIST_FILE} ${WORKSPACE}/TEMP_WORK_FOLDER 
'''
}

